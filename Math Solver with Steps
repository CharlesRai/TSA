import java.util.*;

public class Main {

    List<User> users = new ArrayList<>();

    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();


    public static void main(String[] args) {
//        Main m = new Main();
//        m.makeUser();

        MainGUI gui = new MainGUI();
        gui.createAndShowGUI();

    }

    public void solveMath(){
        MathOps operation = new MathOps();
        input = scanner.nextLine();
//        operation.simplifyProblem(input);

        // If system of equation make new operation and solve the two
        // If inequalities pass less and greater than signs, Finding asymptotes and checking vales in between them

    }

    public void makeUser() {

        //makes new User
        User user = new User();

        System.out.println("Username: ");
        input = scanner.nextLine();

        //sets username to input
        user.username = input;
        System.out.println("Password: ");
        input = scanner.nextLine();

        //sets password to new input
        user.password = input;

        addUser(user);
    }

    private void addUser(User user){
        // adds a new user to an Arraylist

         users.add(user);
        user.setUserIndex(users.size() - 1);
    }

    private void printUserInfo(User User){
        System.out.println(User.getUserIndex());
    }
}


------------------------------------------------------------------------------------------------------------
public class User {
    String username;
    String password;
    String email;
    
    int userIndex;
    boolean loggedIn;

    // Getters
    public String getEmail(){
        return email;
    }
    public String getPassword(){
        return password;
    }
    public String getUsername(){
        return username;
    }
    public int getUserIndex(){
        return userIndex;
    }

    //Setters
    public void setUserIndex(int index){
        userIndex = index;
    }
    public void setPassword(String pass){
        password = pass;
    }
    public void setEmail(String eMail){
        email = eMail;
    }
    public void setLoggedIn(boolean status){
        loggedIn = status;
    }
}
------------------------------------------------------------------------------------------------------------
import javax.swing.*;

class MathOps {

    public void answer(String question){

    }

    public String steps(String question, JTextArea answer){
        boolean unanswered = true;
        int n = 0;
        while (true){
//            answer.append("Step " + n + ": " + String.valueOf() + "\n\r");

            n++;
        }
    }

    private double sqrt(int number){
       return Math.sqrt(number);
    }

    private double cbrt(int number){
        return Math.cbrt(number);
    }

    private int abs(int number){

        return Math.abs(number);
    }

    private double areaCirc(int radius, boolean pi){
        //pi true mean not in terms of pi
        double area;
        if(pi) {
            area = Math.PI * radius * radius;
        } else {
            area = radius * radius;
        }

        return area;
    }

    private double areaNgon(int n, int radius){
        int theta = (n - 2) * 180 / n;
        int thirdAngle = 180 - (theta * 2);

        double thirdSide = (Math.sin(thirdAngle) * radius) / Math.sin(theta);
        double triArea = Math.sin(theta) * radius * thirdSide;

        return triArea * n;
    }

    private double volSph(int radius, boolean pi){
        //pi true mean not in terms of pi
        double vol;
        if (pi){
            vol = 4/3 * Math.PI * radius * radius * radius;
        } else {
            vol = 4/3 * radius * radius * radius;
        }
        return vol;
    }

    private double cos(int radians){
        return Math.cos(radians);
    }

    private double sin(int radians){
        return Math.sin(radians);
    }

    private double tan(int radians){
        return Math.tan(radians);
    }

    private double acos(int radians){
        return Math.acos(radians);
    }

    private double asin(int radians){
        return Math.asin(radians);
    }

    private double atan(int radians){
        return Math.atan(radians);
    }

//    private String differentiate(String operation){
//
//
//    }
//
//    private String integrate(String operation){
//
//
//    }

}
------------------------------------------------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class MainGUI {
    JFrame frame = new JFrame("Calculator");
    TabbedPaneMaker tab = new TabbedPaneMaker();
    MathOps mathOps = new MathOps();
    Buttons button = new Buttons();
    JPanel pane = new JPanel();
    JTextField problem;
    JTextArea answer;
    String prob;
    
    public void createAndShowGUI(){
        // closes program when frame is x'd out
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.add(tab, BorderLayout.BEFORE_FIRST_LINE);

        frame.setBounds(0,0,300,300);
        button.initializeButton(pane);

        frame.add(pane);
        //Display the window.
        frame.setVisible(true);

            button.getButton("Solve").addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    String currentTab = tab.getCurrentTab();
                    String currentTab1;
                    String currentTab2;
                    if(currentTab.equals("Solver")){
                        problem = tab.getProblem();
                        prob = problem.getText();
                    } else if(currentTab.equals("Area")){
                        currentTab1 = tab.getCurrentTab1();
                        if(currentTab1.equals("Circle")){
                            problem = tab.getCircle();
                            prob = problem.getText();
                        } else if(currentTab1.equals("N-Gon")){
                            currentTab2 = tab.getCurrentTab2();
                            if (currentTab2.equals("Number of Sides")){
                                problem = tab.getN();
                                prob = problem.getText();
                            } else if (currentTab2.equals("Side Length")) {
                                problem = tab.getS();
                                prob = problem.getText();
                            }
                        }
                    }
//                     mathOps.steps(prob, answer);
                    System.out.println(prob);
                }
            });
        }
    }

------------------------------------------------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Buttons {
    JButton button = new JButton("Solve");
    JButton button1 = new JButton("Fraction");
    public void initializeButton(Container pane){


        button1.setAlignmentY(Component.CENTER_ALIGNMENT);

        pane.add(button1);
        button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });
        button1.setName("Fraction");



        button.setAlignmentY(Component.BOTTOM_ALIGNMENT);

        pane.add(button);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });
        button.setName("Solve");
    }

    public JButton getButton(String buttonName){

        if(button.getName() == buttonName){
            return (JButton) button;
        }
        return null;
    }

}
------------------------------------------------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class TabbedPaneMaker extends JPanel {

    JTextField problem = new JTextField();
    JTextField circle = new JTextField();
    JTextField n = new JTextField();
    JTextField s = new JTextField();

    JTabbedPane tabbedPane = new JTabbedPane();
    JTabbedPane innerTabbedPane = new JTabbedPane();
    JTabbedPane innerTwoTabbedPane = new JTabbedPane();

    public TabbedPaneMaker() {
        super(new GridLayout(1, 1));
        tabbedPane.addTab("Solver", problem);
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_1);

        tabbedPane.addTab("Area", innerTabbedPane);
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_2);

        innerTabbedPane.addTab("Circle", circle);
        innerTabbedPane.setMnemonicAt(0, KeyEvent.VK_1);

        innerTabbedPane.addTab("N-Gon", innerTwoTabbedPane);
        innerTabbedPane.setMnemonicAt(1, KeyEvent.VK_2);

        innerTwoTabbedPane.addTab("Number of Sides", n);
        innerTwoTabbedPane.addTab("Side Length", s);


        //Add the tabbed pane to this panel.
        add(tabbedPane);

    }

    protected JComponent makeTextPanel(String text) {
        JPanel panel = new JPanel(false);
        JLabel filler = new JLabel(text);
        filler.setHorizontalAlignment(JLabel.CENTER);
        panel.setLayout(new GridLayout(2, 1));
        panel.add(filler);
        return panel;
    }

    public String getCurrentTab(){
        return tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());
    }
    public String getCurrentTab1(){
        return innerTabbedPane.getTitleAt(innerTabbedPane.getSelectedIndex());
    }
    public String getCurrentTab2(){
        return innerTwoTabbedPane.getTitleAt(innerTwoTabbedPane.getSelectedIndex());
    }

    public JTextField getProblem() {
        return problem;
    }

    public JTextField getCircle() {
        return circle;
    }

    public JTextField getN() {
        return n;
    }

    public JTextField getS() {
        return s;
    }
}
