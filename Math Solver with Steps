import java.util.*;

public class Main {

    List<User> users = new ArrayList<>();

    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();


    public static void main(String[] args) {
//        Main m = new Main();
//        m.makeUser();

        MainGUI gui = new MainGUI();
        gui.createAndShowGUI();

    }

    public void solveMath(){
        MathOps operation = new MathOps();
        input = scanner.nextLine();
//        operation.simplifyProblem(input);

        // If system of equation make new operation and solve the two
        // If inequalities pass less and greater than signs, Finding asymptotes and checking vales in between them

    }

    public void makeUser() {

        //makes new User
        User user = new User();

        System.out.println("Username: ");
        input = scanner.nextLine();

        //sets username to input
        user.username = input;
        System.out.println("Password: ");
        input = scanner.nextLine();

        //sets password to new input
        user.password = input;

        addUser(user);
    }

    private void addUser(User user){
        // adds a new user to an Arraylist

         users.add(user);
        user.setUserIndex(users.size() - 1);
    }

    private void printUserInfo(User User){
        System.out.println(User.getUserIndex());
    }
}


------------------------------------------------------------------------------------------------------------
public class User {
    String username;
    String password;
    String email;
    
    int userIndex;
    boolean loggedIn;

    // Getters
    public String getEmail(){
        return email;
    }
    public String getPassword(){
        return password;
    }
    public String getUsername(){
        return username;
    }
    public int getUserIndex(){
        return userIndex;
    }

    //Setters
    public void setUserIndex(int index){
        userIndex = index;
    }
    public void setPassword(String pass){
        password = pass;
    }
    public void setEmail(String eMail){
        email = eMail;
    }
    public void setLoggedIn(boolean status){
        loggedIn = status;
    }
}
------------------------------------------------------------------------------------------------------------
class MathOps {

    public String answer(String primaryArg, String arg, String arg1, String currentTab){
        int prob;
        int prob1;
        float area;

        switch (currentTab) {
            case "N-Gon":
                prob = Integer.parseInt(arg);
                prob1 = Integer.parseInt(arg1);
                area = areaNgon(prob, prob1);

                return String.valueOf(area);
            case "Circle":
                prob = Integer.parseInt(arg);

                return areaCirc(prob);
            case "Solver":
                if (primaryArg.contains("sqrt")) {
                    return String.valueOf(sqrt(primaryArg));

                } else if (primaryArg.contains("cbrt")) {
                    return String.valueOf(cbrt(primaryArg));

                } else if (primaryArg.contains("abs")) {
                    return String.valueOf(abs(primaryArg));

                } else if (primaryArg.contains("asin")) {
                    return String.valueOf(asin(primaryArg));

                } else if (primaryArg.contains("acos")) {
                    return String.valueOf(acos(primaryArg));

                } else if (primaryArg.contains("atan")) {
                    return String.valueOf(atan(primaryArg));

                } else if (primaryArg.contains("sin")) {
                    return String.valueOf(sin(primaryArg));

                } else if (primaryArg.contains("cos")) {
                    return String.valueOf(cos(primaryArg));

                } else if (primaryArg.contains("tan")) {
                    return String.valueOf(tan(primaryArg));

                } else {
                    return String.valueOf(solveProblemBite(primaryArg));
                }
        }
        return "";
    }

    public float solveProblemBite(String bite){
        float biteAnswer = 0;
        int plusCount = 0;
        int minusCount = 0;
        int multiCount = 0;
        int diviCount = 0;

        for (int i = 0; i < bite.length(); i++) {
            if(bite.charAt(i) == '+'){
                plusCount++;
            } else if (bite.charAt(i) == '-') {
                minusCount++;
            } else if (bite.charAt(i) == '/') {
                diviCount++;
            } else if (bite.charAt(i) == '*') {
                multiCount++;
            }
        }
        if (diviCount > 0){
            biteAnswer = handleDiv(bite, diviCount);
        } else if (multiCount > 0){
            biteAnswer = handleMulti(bite, multiCount);
        } else if (plusCount > 0){
            biteAnswer = handleAddition(bite, plusCount);
        } else if (minusCount > 0){
            biteAnswer = handleSubtraction(bite, minusCount);
        }
        return biteAnswer;
    }

    private float handleDiv(String bite, int divCount) {
        float biteAnswer = 0;
        String[] storeDiv = bite.split("/");
        for (int i = 0; i < divCount; i++) {
            biteAnswer = Float.parseFloat(storeDiv[i]) / Float.parseFloat(storeDiv[i + 1]);
        }
        return biteAnswer;
    }

    private int handleMulti(String bite, int multiCount) {
        int biteAnswer = 0;
        String[] storeMult = bite.split("[*]");
        for (int i = 0; i < multiCount; i++) {
            biteAnswer = Integer.parseInt(storeMult[i]) * Integer.parseInt(storeMult[i + 1]);
        }
        return biteAnswer;
    }

    private int handleAddition(String bite, int plusCount) {
        int biteAnswer = 0;
        String[] storeAdd = bite.split("[+]");
        for (int i = 0; i < plusCount; i++) {
            biteAnswer = Integer.parseInt(storeAdd[i]) + Integer.parseInt(storeAdd[i + 1]);
        }
        return biteAnswer;
    }

    private int handleSubtraction(String bite, int minusCount) {
        int biteAnswer = 0;
        String[] storeSub = bite.split("-");
        for (int i = 0; i < minusCount; i++) {
            biteAnswer = Integer.parseInt(storeSub[i]) - Integer.parseInt(storeSub[i + 1]);
        }
        return biteAnswer;
    }

    private double sqrt(String problem){
        String num = "";
        for (int i = 0; i < problem.length() - 4; i++) {
            num += String.valueOf(problem.charAt(i + 4));
        }
        int number = Integer.parseInt(num);
        return Math.sqrt(number);
    }

    private double cbrt(String problem){
        String num = "";
        for (int i = 0; i < problem.length() - 4; i++) {
            num += String.valueOf(problem.charAt(i + 4));
        }
        int number = Integer.parseInt(num);
        return Math.cbrt(number);
    }

    private int abs(String problem){
        String num = "";
        for (int i = 0; i < problem.length() - 3; i++) {
            num += String.valueOf(problem.charAt(i + 3));
        }
        int number = Integer.parseInt(num);
        return Math.abs(number);
    }

    private String areaCirc(int radius){
        //pi true mean not in terms of pi
        double area;
        double areaPi;
            area = Math.PI * radius * radius;
            areaPi = radius * radius;
        String sArea = String.valueOf(area);
        String sAreaPi = String.valueOf(areaPi);

        return sArea + " or " + sAreaPi + " pi";
    }

    private float areaNgon(float n, float s){

        float theta = (float)(((n - 2) * 180 / n) * Math.PI / 180);
        float thirdAngle = (float)(Math.PI - theta);
        float thirdSide = (float)((s * Math.sin(theta/2))/Math.sin(thirdAngle));
        float triArea = (float)(Math.sin(theta / 2) * s * thirdSide / 2);

        if(n == 3){
            triArea = s * s / 2;
        }
        return triArea * n;
    }

    private double cos(String problem){
        String num = "";
        float radians;
        char n = ' ';
        for (int i = 0; i < problem.length() - 3 && n != 'p'; i++) {
            num += String.valueOf(problem.charAt(i + 3));
            n = problem.charAt(i + 3);
        }
        if(problem.contains("pi")){
            String num1 = num.substring(0,num.length() - 1);
            radians = Float.parseFloat(String.valueOf(Math.PI)) * Float.parseFloat(num1);
        } else {
            radians = Float.parseFloat(num);
        }
        return Math.cos(radians);
    }

    private double sin(String problem){
        String num = "";
        float radians;
        char n = ' ';
        for (int i = 0; i < problem.length() - 3 && n != 'p'; i++) {
            num += String.valueOf(problem.charAt(i + 3));
            n = problem.charAt(i + 3);
        }
        if(problem.contains("pi")){
            String num1 = num.substring(0,num.length() - 1);
            radians = Float.parseFloat(String.valueOf(Math.PI)) * Float.parseFloat(num1);
        } else {
            radians = Float.parseFloat(num);
        }
        return Math.sin(radians);
    }

    private double tan(String problem){
        String num = "";
        float radians;
        char n = ' ';
        for (int i = 0; i < problem.length() - 3 && n != 'p'; i++) {
            num += String.valueOf(problem.charAt(i + 3));
            n = problem.charAt(i + 3);
        }
        if(problem.contains("pi")){
            String num1 = num.substring(0,num.length() - 1);
            radians = Float.parseFloat(String.valueOf(Math.PI)) * Float.parseFloat(num1);
        } else {
            radians = Float.parseFloat(num);
        }
        return Math.tan(radians);
    }

    private double acos(String problem){
        String num = "";
        float radians;
        char n = ' ';
        for (int i = 0; i < problem.length() - 4 && n != 'p'; i++) {
            num += String.valueOf(problem.charAt(i + 4));
            n = problem.charAt(i + 4);
        }
        if(problem.contains("pi")){
            String num1 = num.substring(0,num.length() - 1);
            radians = Float.parseFloat(String.valueOf(Math.PI)) * Float.parseFloat(num1);
        } else {
            radians = Float.parseFloat(num);
        }
        return Math.acos(radians);
    }

    private double asin(String problem){
        String num = "";
        float radians;
        char n = ' ';
        for (int i = 0; i < problem.length() - 4 && n != 'p'; i++) {
            num += String.valueOf(problem.charAt(i + 4));
            n = problem.charAt(i + 4);
        }
        if(problem.contains("pi")){
            String num1 = num.substring(0,num.length() - 1);
            radians = Float.parseFloat(String.valueOf(Math.PI)) * Float.parseFloat(num1);
        } else {
            radians = Float.parseFloat(num);
        }

        return Math.asin(radians);
    }

    private double atan(String problem){
        String num = "";
        float radians;
        char n = ' ';
        for (int i = 0; i < problem.length() - 4 && n != 'p'; i++) {
            num += String.valueOf(problem.charAt(i + 4));
            n = problem.charAt(i + 4);
        }
        if(problem.contains("pi")){
            String num1 = num.substring(0,num.length() - 1);
            radians = Float.parseFloat(String.valueOf(Math.PI)) * Float.parseFloat(num1);
        } else {
            radians = Float.parseFloat(num);
        }
        return Math.atan(radians);
    }
}
------------------------------------------------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class MainGUI {
    JPanel bottomPane = new JPanel(new GridLayout(3,1));
    JFrame frame = new JFrame("Calculator");
    TabbedPaneMaker tab = new TabbedPaneMaker();
    JTextField answer = new JTextField("Answer");
    MathOps mathOps = new MathOps();
    Buttons button = new Buttons();
    JPanel pane = new JPanel();
    JTextField problemBox = new JTextField("");
    JTextField problem;

    JLabel instructions = new JLabel("<html>Enter every set of Arguments Separately<br><br>" +
                                          "Clear Arguments after every Solve<html>");

    String prob;
    String prob2;

    public void createAndShowGUI(){
        // closes program when frame is x'd out
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.add(tab, BorderLayout.BEFORE_FIRST_LINE);

        frame.setBounds(0,0,500,500);

        answer.setEditable(false);
        problemBox.setEditable(false);

        problemBox.setSize(9,9);

        button.initializeButton(pane);
        button.initializeButton(pane);

        bottomPane.add(instructions);
        bottomPane.add(problemBox);
        bottomPane.add(answer);

        frame.add(pane);
        frame.add(bottomPane, BorderLayout.AFTER_LAST_LINE);

        //Display the window.
        frame.setVisible(true);

        button.getButton("Save").addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent event) {
                problem = tab.getProblem();
                problemBox.setText(problemBox.getText() + problem.getText());

            }
        });

        button.getButton("Clear").addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent event) {
                problemBox.setText("");
            }
        });

        button.getButton("Solve").addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                String currentTab = tab.getCurrentTab();
                String currentTab1;
                String cTab = null;
                if(currentTab.equals("Solver")){
                    problem = tab.getProblem();
                    prob = problem.getText();
                    cTab = "Solver";
                } else if(currentTab.equals("Area")){
                    currentTab1 = tab.getCurrentTab1();
                    if(currentTab1.equals("Circle")){
                        problem = tab.getCircle();
                        prob = problem.getText();
                        cTab = "Circle";
                    } else if(currentTab1.equals("N-Gon")){
                        problem = tab.getN();
                        prob = problem.getText();
                        problem = tab.getS();
                        prob2 = problem.getText();
                        cTab = "N-Gon";

                    }
                }

                answer.setText(mathOps.answer(problemBox.getText(), prob ,prob2 ,cTab));

            }
        });
    }
}
------------------------------------------------------------------------------------------------------------
import java.awt.*;
import javax.swing.*;

class Buttons {
    JButton button = new JButton("Solve");
    JButton button1 = new JButton("Save");
    JButton button2 = new JButton("Clear");

    public void initializeButton(Container pane){

        button.setAlignmentY(Component.BOTTOM_ALIGNMENT);


        pane.add(button);
        button.setName("Solve");

        pane.add(button1);
        button1.setName("Save");

        pane.add(button2);
        button2.setName("Clear");

    }

    public JButton getButton(String buttonName){

        if(button.getActionCommand().equals(buttonName)){
            return button;
        } else if(button1.getActionCommand().equals(buttonName)){
            return button1;
        } else if(button2.getActionCommand().equals(buttonName)){
            return button2;
        }
        return null;
    }
}
------------------------------------------------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class TabbedPaneMaker extends JPanel {

    JTextField problem = new JTextField();
    JTextField circle = new JTextField();
    JTextField n = new JTextField();
    JTextField s = new JTextField();

    JTabbedPane tabbedPane = new JTabbedPane();
    JTabbedPane innerTabbedPane = new JTabbedPane();
    JTabbedPane innerTwoTabbedPane = new JTabbedPane();

    public TabbedPaneMaker() {
        super(new GridLayout(1, 1));
        tabbedPane.addTab("Solver", problem);
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_1);

        tabbedPane.addTab("Area", innerTabbedPane);
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_2);

        innerTabbedPane.addTab("Circle", circle);
        innerTabbedPane.setMnemonicAt(0, KeyEvent.VK_1);

        innerTabbedPane.addTab("N-Gon", innerTwoTabbedPane);
        innerTabbedPane.setMnemonicAt(1, KeyEvent.VK_2);

        innerTwoTabbedPane.addTab("Number of Sides", n);
        innerTwoTabbedPane.addTab("Side Length", s);


        //Add the tabbed pane to this panel.
        add(tabbedPane);

    }

    protected JComponent makeTextPanel(String text) {
        JPanel panel = new JPanel(false);
        JLabel filler = new JLabel(text);
        filler.setHorizontalAlignment(JLabel.CENTER);
        panel.setLayout(new GridLayout(2, 1));
        panel.add(filler);
        return panel;
    }

    public String getCurrentTab(){
        return tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());
    }
    public String getCurrentTab1(){
        return innerTabbedPane.getTitleAt(innerTabbedPane.getSelectedIndex());
    }
    public String getCurrentTab2(){
        return innerTwoTabbedPane.getTitleAt(innerTwoTabbedPane.getSelectedIndex());
    }

    public JTextField getProblem() {
        return problem;
    }

    public JTextField getCircle() {
        return circle;
    }

    public JTextField getN() {
        return n;
    }

    public JTextField getS() {
        return s;
    }

}
