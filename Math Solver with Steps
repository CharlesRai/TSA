import java.util.*;

public class Main {

    List<User> users = new ArrayList<>();

    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();


    public static void main(String[] args) {
//        Main m = new Main();
//        m.makeUser();

        MainGUI gui = new MainGUI();
        gui.createAndShowGUI();

    }

    public void solveMath(){
        MathOps operation = new MathOps();
        input = scanner.nextLine();
//        operation.simplifyProblem(input);

        // If system of equation make new operation and solve the two
        // If inequalities pass less and greater than signs, Finding asymptotes and checking vales in between them

    }

    public void makeUser() {

        //makes new User
        User user = new User();

        System.out.println("Username: ");
        input = scanner.nextLine();

        //sets username to input
        user.username = input;
        System.out.println("Password: ");
        input = scanner.nextLine();

        //sets password to new input
        user.password = input;

        addUser(user);
    }

    private void addUser(User user){
        // adds a new user to an Arraylist

         users.add(user);
        user.setUserIndex(users.size() - 1);
    }

    private void printUserInfo(User User){
        System.out.println(User.getUserIndex());
    }
}


------------------------------------------------------------------------------------------------------------
public class User {
    String username;
    String password;
    String email;
    
    int userIndex;
    boolean loggedIn;

    // Getters
    public String getEmail(){
        return email;
    }
    public String getPassword(){
        return password;
    }
    public String getUsername(){
        return username;
    }
    public int getUserIndex(){
        return userIndex;
    }

    //Setters
    public void setUserIndex(int index){
        userIndex = index;
    }
    public void setPassword(String pass){
        password = pass;
    }
    public void setEmail(String eMail){
        email = eMail;
    }
    public void setLoggedIn(boolean status){
        loggedIn = status;
    }
}
------------------------------------------------------------------------------------------------------------

class MathOps {

    public String answer(String arg, String arg1, String currentTab){
        int prob;
        int prob1;
        float area;

        int parenthesisCount = 0;
        String problemBite = "";

        if(currentTab.equals("N-Gon")){
            prob = Integer.parseInt(arg);
            prob1 = Integer.parseInt(arg1);
            area = areaNgon(prob,prob1);

            return String.valueOf(area);
        } else if(currentTab.equals("Circle")){
            prob = Integer.parseInt(arg);

            return areaCirc(prob);
        } else if (currentTab.equals("Solver")) {
            arg = "(" + arg + ")";
            for (int i = 0; i < arg.length(); i++) {
                if(arg.charAt(i) == '('){
                    parenthesisCount++;
                    problemBite += arg.charAt(i);
                } else if (arg.charAt(i) == ')') {
                    parenthesisCount--;
                    //Doesn't work for functions like cos(x), tan(x), asin(x)

                    problemBite += arg.charAt(i);
                    solveProblemBite(problemBite);
                }
            }

        }

        return "";
    }

    public int solveProblemBite(String bite){
        int biteAnswer = 0;
        int plusCount = 0;
        int minusCount = 0;
        int multiCount = 0;
        int diviCount = 0;

        for (int i = 0; i < bite.length(); i++) {
            if(bite.charAt(i) == '+'){
                plusCount++;
            } else if (bite.charAt(i) == '-') {
                minusCount++;
            } else if (bite.charAt(i) == '/') {
                diviCount++;
            } else if (bite.charAt(i) == '*') {
                multiCount++;
            }

        }

        String storeAdd[] = new String[plusCount];
        storeAdd = bite.split("[+]");

        String storeSub[] = new String[minusCount];
        String storeMult[] = new String[multiCount];
        String storeDivide[] = new String[diviCount];

        for (int i = 0; i < storeAdd.length; i++) {
             storeSub = storeAdd[i].split("-");
        }


        for (int i = 0; i < storeSub.length; i++) {
            if(storeSub[i].contains("*")){
                storeMult = storeSub[i].split("[*]");
            } else if (storeSub[i].contains("/")) {
                storeDivide = storeSub[i].split("/");
            }
        }

        for (int i = 0; i < storeDivide.length - 1; i++) {
            for (int j = 0; j < storeMult.length; j++) {
                if(storeMult[j].equals(storeDivide[i] + "/" + storeDivide[i + 1])){
                    storeMult[j] = String.valueOf(Integer.parseInt(storeDivide[i]) / Integer.parseInt(storeDivide[i + 1]));
                }
            }
        }

        for (int i = 0; i < storeMult.length - 1; i++) {
            for (int j = 0; j < storeSub.length; j++) {
                if(storeSub[j].equals(storeMult[i] + "*" + storeMult[i+ 1]))   {
                    storeSub[j] = String.valueOf(Integer.parseInt(storeMult[i]) * Integer.parseInt(storeMult[i + 1]));
                }
            }
        }

        for (int i = 0; i < storeSub.length - 1; i++) {
            for (int j = 0; j < storeAdd.length; j++) {
                if(storeAdd[j].equals((storeSub[i] + "-" + storeSub[i + 1]))){
                    storeAdd[j] = String.valueOf(Integer.parseInt(storeSub[i]) * Integer.parseInt(storeSub[i + 1]));
                }
            }
        }

        for (int i = 0; i < storeAdd.length; i++) {
            biteAnswer += Integer.parseInt(storeAdd[i]);
        }
        return biteAnswer;
    }


    private double sqrt(int number){
       return Math.sqrt(number);
    }

    private double cbrt(int number){
        return Math.cbrt(number);
    }

    private int abs(int number){

        return Math.abs(number);
    }

    private String areaCirc(int radius){
        //pi true mean not in terms of pi
        double area;
        double areaPi;
            area = Math.PI * radius * radius;
            areaPi = radius * radius;
        String sArea = String.valueOf(area);
        String sAreaPi = String.valueOf(areaPi);


        return sArea + " or " + sAreaPi + " pi";
    }

    private float areaNgon(float n, float s){

        float theta = (float)(((n - 2) * 180 / n) * 3.14159265358979323846264338327 / 180);
        float thirdAngle = (float)(3.14159265358979323846264338327 - theta);
        float thirdSide = (float)((s * Math.sin(theta/2))/Math.sin(thirdAngle));
        float triArea = (float)(Math.sin(theta / 2) * s * thirdSide / 2);

        if(n == 3){
            triArea = s * s / 2;
        }

        return triArea * n;
    }

    private double volSph(int radius, boolean pi){
        //pi true mean not in terms of pi
        double vol;
        if (pi){
            vol = 4/3 * Math.PI * radius * radius * radius;
        } else {
            vol = 4/3 * radius * radius * radius;
        }
        return vol;
    }

    private double cos(int radians){
        return Math.cos(radians);
    }

    private double sin(int radians){
        return Math.sin(radians);
    }

    private double tan(int radians){
        return Math.tan(radians);
    }

    private double acos(int radians){
        return Math.acos(radians);
    }

    private double asin(int radians){
        return Math.asin(radians);
    }

    private double atan(int radians){
        return Math.atan(radians);
    }

//    private String differentiate(String operation){
//
//
//    }
//
//    private String integrate(String operation){
//
//
//    }

}
//
//
//    }

}
------------------------------------------------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class MainGUI {
    JFrame frame = new JFrame("Calculator");
    TabbedPaneMaker tab = new TabbedPaneMaker();
    JTextArea answer = new JTextArea("Answer");
    MathOps mathOps = new MathOps();
    Buttons button = new Buttons();
    JPanel pane = new JPanel();
    JPanel bottomPane = new JPanel(new FlowLayout(FlowLayout.CENTER));
    JTextField problem;

    String prob;
    String prob2;

    public void createAndShowGUI(){
        // closes program when frame is x'd out
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.add(tab, BorderLayout.BEFORE_FIRST_LINE);

        frame.setBounds(0,0,300,300);

        answer.setEditable(false);

        button.initializeButton(pane);
        bottomPane.add(answer);

        frame.add(pane);
        frame.add(bottomPane, BorderLayout.AFTER_LAST_LINE);


        //Display the window.
        frame.setVisible(true);


            button.getButton("Solve").addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    String currentTab = tab.getCurrentTab();
                    String currentTab1;
                    String cTab = null;
                    if(currentTab.equals("Solver")){
                        problem = tab.getProblem();
                        prob = problem.getText();
                        cTab = "Solver";
                    } else if(currentTab.equals("Area")){
                        currentTab1 = tab.getCurrentTab1();
                        if(currentTab1.equals("Circle")){
                            problem = tab.getCircle();
                            prob = problem.getText();
                            cTab = "Circle";
                        } else if(currentTab1.equals("N-Gon")){
                                problem = tab.getN();
                                prob = problem.getText();
                                problem = tab.getS();
                                prob2 = problem.getText();
                            cTab = "N-Gon";

                        }
                    }

                    answer.setText(mathOps.answer(prob,prob2,cTab));

                }
            });
        }
    }
------------------------------------------------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Buttons {
    JButton button = new JButton("Solve");
    JButton button1 = new JButton("Fraction");
    public void initializeButton(Container pane){

        button1.setAlignmentY(Component.CENTER_ALIGNMENT);

        pane.add(button1);
        button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });
        button1.setName("Fraction");



        button.setAlignmentY(Component.BOTTOM_ALIGNMENT);

        pane.add(button);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });
        button.setName("Solve");
    }

    public JButton getButton(String buttonName){

        if(button.getName() == buttonName){
            return (JButton) button;
        }
        return null;
    }

}
------------------------------------------------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class TabbedPaneMaker extends JPanel {

    JTextField problem = new JTextField();
    JTextField circle = new JTextField();
    JTextField n = new JTextField();
    JTextField s = new JTextField();

    JTabbedPane tabbedPane = new JTabbedPane();
    JTabbedPane innerTabbedPane = new JTabbedPane();
    JTabbedPane innerTwoTabbedPane = new JTabbedPane();

    public TabbedPaneMaker() {
        super(new GridLayout(1, 1));
        tabbedPane.addTab("Solver", problem);
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_1);

        tabbedPane.addTab("Area", innerTabbedPane);
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_2);

        innerTabbedPane.addTab("Circle", circle);
        innerTabbedPane.setMnemonicAt(0, KeyEvent.VK_1);

        innerTabbedPane.addTab("N-Gon", innerTwoTabbedPane);
        innerTabbedPane.setMnemonicAt(1, KeyEvent.VK_2);

        innerTwoTabbedPane.addTab("Number of Sides", n);
        innerTwoTabbedPane.addTab("Side Length", s);

        //Add the tabbed pane to this panel.
        add(tabbedPane);
    }

    protected JComponent makeTextPanel(String text) {
        JPanel panel = new JPanel(false);
        JLabel filler = new JLabel(text);
        filler.setHorizontalAlignment(JLabel.CENTER);
        panel.setLayout(new GridLayout(2, 1));
        panel.add(filler);
        return panel;
    }

    public String getCurrentTab(){
        return tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());
    }
    public String getCurrentTab1(){
        return innerTabbedPane.getTitleAt(innerTabbedPane.getSelectedIndex());
    }
    public String getCurrentTab2(){
        return innerTwoTabbedPane.getTitleAt(innerTwoTabbedPane.getSelectedIndex());
    }

    public JTextField getProblem() {
        return problem;
    }

    public JTextField getCircle() {
        return circle;
    }

    public JTextField getN() {
        return n;
    }

    public JTextField getS() {
        return s;
    }
}
